####creating a special matrix object that can cache its inverse#######

###Creating special matrix object that could cache inverse###


makeCacheMatrix <- function(x = matrix()) {

####naming p and initializing the inverse property#######
  p <- NULL

###Method to set matrix####
  set <- function(y){
  x <<- y
  p <<- NULL
  }

###Method to get matrix and highlight list of methods to get the answer for inverse of matrix####
  get <- function()x
  setInverse <- function(inverse) p <<- inverse
  getInverse <- function() p 
  list(set = set, get = get, 
  setInverse = setInverse, 
  getInverse = getInverse)
}

## This function shows the steps for calcualating the inverse of the special "matrix" created by 
## makeCacheMatrix above. If the inverse has been found already (and the 
## matrix has not changed), then it should retrieve the inverse from the cache.

cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
  f <- x$getInverse()
  if(!is.null(j)){
  message("getting cached data")
  return(f)
  }
  mat <- x$get()
  f <- solve(mat,...)
  x$setInverse(f)
  f
}
